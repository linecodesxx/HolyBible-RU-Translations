import re
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

filename = ""
translation = ""

driver = webdriver.Firefox()
wait = WebDriverWait(driver, 10)  # –∂–¥—ë–º –¥–æ 10 —Å–µ–∫—É–Ω–¥

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JSON
with open(f"{filename}.json", "r", encoding="utf-8") as f:
    bible_data = json.load(f)

existing_ids = {book["BookId"] for book in bible_data["Books"]}

old_testament_names = [
    "–ë—ã—Ç–∏–µ", "–ò—Å—Ö–æ–¥", "–õ–µ–≤–∏—Ç", "–ß–∏—Å–ª–∞", "–í—Ç–æ—Ä–æ–∑–∞–∫–æ–Ω–∏–µ",
    "–ò–∏—Å—É—Å –ù–∞–≤–∏–Ω", "–°—É–¥—å–∏", "–†—É—Ñ—å", "1 –¶–∞—Ä—Å—Ç–≤", "2 –¶–∞—Ä—Å—Ç–≤",
    "3 –¶–∞—Ä—Å—Ç–≤", "4 –¶–∞—Ä—Å—Ç–≤", "1 –ü–∞—Ä–∞–ª–∏–ø–æ–º–µ–Ω–æ–Ω", "2 –ü–∞—Ä–∞–ª–∏–ø–æ–º–µ–Ω–æ–Ω",
    "–ï–∑–¥—Ä–∞", "–ù–µ–µ–º–∏—è", "–ï—Å—Ñ–∏—Ä—å", "–ò–æ–≤", "–ü—Å–∞–ª—Ç–∏—Ä—å",
    "–ü—Ä–∏—Ç—á–∏", "–ï–∫–∫–ª–µ—Å–∏–∞—Å—Ç", "–ü–µ—Å–Ω—è –ü–µ—Å–Ω–µ–π", "–ò—Å–∞–∏—è", "–ò–µ—Ä–µ–º–∏—è",
    "–ü–ª–∞—á –ò–µ—Ä–µ–º–∏–∏", "–ò–µ–∑–µ–∫–∏–∏–ª—å", "–î–∞–Ω–∏–∏–ª", "–û—Å–∏—è", "–ò–æ–∏–ª—å",
    "–ê–º–æ—Å", "–ê–≤–¥–∏–π", "–ò–æ–Ω–∞", "–ú–∏—Ö–µ–π", "–ù–∞—É–º",
    "–ê–≤–≤–∞–∫—É–º", "–°–æ—Ñ–æ–Ω–∏—è", "–ê–≥–≥–µ–π", "–ó–∞—Ö–∞—Ä–∏—è", "–ú–∞–ª–∞—Ö–∏—è"
]

start_book_id_for_json = 28  # –Ω—É–º–µ—Ä–∞—Ü–∏—è –≤ JSON —Å 28

for real_book_id in range(1, 40):
    json_book_id = start_book_id_for_json + real_book_id - 1
    book_name = old_testament_names[real_book_id - 1]

    if json_book_id in existing_ids:
        print(f"‚è≠ –ö–Ω–∏–≥–∞ —Å JSON BookId {json_book_id} —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        continue

    print(f"üìò –ü–∞—Ä—Å–∏–º –∫–Ω–∏–≥—É {real_book_id} ({book_name}) —Å JSON BookId {json_book_id}")

    book_obj = {
        "BookId": json_book_id,
        "BookName": book_name,
        "Chapters": []
    }

    chapter_id = 1
    while True:
        url = f"https://bible.by/{translation}/{real_book_id}/{chapter_id}/"
        driver.get(url)

        try:
            wait.until(EC.presence_of_element_located((By.CLASS_NAME, "text")))
        except TimeoutException:
            print(f"‚ùå –ì–ª–∞–≤–∞ {chapter_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º")
            break

        try:
            text_block = driver.find_element(By.CLASS_NAME, "text")
            verse_divs = text_block.find_elements(By.TAG_NAME, "div")
            if not verse_divs:
                print(f"‚ùå –ü—É—Å—Ç–∞—è –≥–ª–∞–≤–∞ {chapter_id}, –≤—ã—Ö–æ–¥–∏–º")
                break
        except NoSuchElementException:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∏—Ö–æ–≤ –≤ –≥–ª–∞–≤–µ {chapter_id}, –≤—ã—Ö–æ–¥–∏–º")
            break

        chapter_obj = {
            "ChapterId": chapter_id,
            "Verses": []
        }

        for div in verse_divs:
            try:
                ver_id = div.find_element(By.TAG_NAME, "sup").find_element(By.TAG_NAME, "a").text
                ver_text = re.sub(r'^\d+\s+', '', div.text).strip()
                if ver_id.isdigit():
                    chapter_obj["Verses"].append({
                        "VerseId": int(ver_id),
                        "Text": ver_text
                    })
            except NoSuchElementException:
                continue

        book_obj["Chapters"].append(chapter_obj)
        print(f"‚úÖ –ì–ª–∞–≤–∞ {chapter_id} –∫–Ω–∏–≥–∏ {book_name} —Å–æ–±—Ä–∞–Ω–∞")
        chapter_id += 1

    if book_obj["Chapters"]:
        bible_data["Books"].append(book_obj)
        print(f"‚úÖ –ö–Ω–∏–≥–∞ {book_name} —Å JSON BookId {json_book_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞\n")
    else:
        print(f"‚è≠ –ö–Ω–∏–≥–∞ {book_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–ª–∞–≤ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–∞\n")

driver.quit()

with open(f"filename.json", "w", encoding="utf-8") as f:
    json.dump(bible_data, f, ensure_ascii=False, indent=2)

print("‚úÖ –í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç (—Å 1 –ø–æ 39 –∫–Ω–∏–≥—É, JSON BookId —Å 28) –¥–æ–±–∞–≤–ª–µ–Ω. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
